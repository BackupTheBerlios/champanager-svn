package championship.manager.ui;

import championship.manager.MainFrame;
import championship.manager.domain.Game;
import championship.manager.timer.CountingWatchPanel;
import championship.manager.util.ComponentUtil;
import championship.manager.util.HibernateUtil;

import java.awt.*;
import java.util.StringTokenizer;

import org.hibernate.Session;
import org.hibernate.Transaction;

// TODO: document me!!!

/**
 * ObserverFrame.
 * <p/>
 * User: rro
 * Date: 06.01.2006
 * Time: 23:31:52
 *
 * @author Roman R&auml;dle
 * @version $Id: ObserverFrame.java,v 1.1 2006/04/05 09:09:14 raedler Exp $
 */
public class ObserverFrame extends javax.swing.JFrame {

    private MainFrame mainFrame;

    private CountingWatchPanel countingWatchP;
    private long time;
    private long decrement;

    private javax.swing.JLabel currentAwayteamL;
    private javax.swing.JLabel currentGameL;
    private javax.swing.JLabel currentHometeamL;
    private championship.manager.ShowTablePanel showTableP;

    /**
     * Creates new form ShowGameTablePanel
     */
    public ObserverFrame(MainFrame mainFrame, long time, long decrement) {

        setTitle("OBSERVER - " + mainFrame.getTitle());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        this.mainFrame = mainFrame;

        this.time = time;
        this.decrement = decrement;

        initComponents();

        pack();

        ComponentUtil.centerComponentOnScreen(this);

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        countingWatchP = new CountingWatchPanel(time, decrement);

        showTableP = new championship.manager.ShowTablePanel(mainFrame);
        currentHometeamL = new javax.swing.JLabel();
        currentAwayteamL = new javax.swing.JLabel();
        currentGameL = new javax.swing.JLabel();

        currentHometeamL.setFont(new java.awt.Font("Tahoma", 1, 56));
        currentAwayteamL.setFont(new java.awt.Font("Tahoma", 1, 56));
        currentGameL.setFont(new java.awt.Font("Tahoma", 1, 48));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(currentGameL, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(countingWatchP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, currentAwayteamL, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                                .add(showTableP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, currentHometeamL, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(currentGameL)
                                .add(countingWatchP))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(currentHometeamL, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(currentAwayteamL, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(showTableP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                        .addContainerGap())
        );
    }

    public void startCountingWatch(boolean continueWatchTime) {
        countingWatchP.startWatch(continueWatchTime);
    }

    public void stopCountingWatch() {
        countingWatchP.stopWatch();
    }

    public void resetCountingWatch() {
        countingWatchP.resetWatch();
    }

    public void renewCountingWatch() {
        countingWatchP.setTime(mainFrame.getCountingWatchTime());
        countingWatchP.repaint();
    }

    public void setGameLabellingSize(int sizeShift) {

        Font font = currentHometeamL.getFont();
        Font newFont = new Font(font.getName(), font.getStyle(), font.getSize() + sizeShift);
        currentHometeamL.setFont(newFont);
        currentAwayteamL.setFont(newFont);

        Font tableHeaderFont = showTableP.getTable().getTableHeader().getFont();
        Font newTableHeaderFont = new Font(tableHeaderFont.getName(), tableHeaderFont.getStyle(), tableHeaderFont.getSize() + sizeShift);
        showTableP.getTable().getTableHeader().setFont(newTableHeaderFont);
    }

    /**
     *
     */
    public void repaintObserver(Game game) {

        if (game != null) {
            StringTokenizer resultTokenizer = new StringTokenizer(game.getResult() != null ? game.getResult() : "-:-", ":");

            currentGameL.setText("Spiel-Nr. " + game.getGamePosition());
            currentHometeamL.setText(resultTokenizer.nextToken() + "    " + game.getHometeam().getName());
            currentAwayteamL.setText(resultTokenizer.nextToken() + "    " + game.getAwayteam().getName());

            showTableP.setGroupName(game.getGroupName());
        }

        repaint();
    }

    public void setObserverColor(Color color) {
        this.getContentPane().setBackground(color);
        countingWatchP.setBackground(color);
        showTableP.setTablePanelColor(color);
    }
}
